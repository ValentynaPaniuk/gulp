{"version":3,"sources":["_vars.scss","main.css","_settings.scss","components/_header.scss","mixins/_breakpoint.scss"],"names":[],"mappings":"AAEA;EAEE,sCAAA;EACA,uBAAA;EACA,wBAAA;EACA,6EAAA;EAGA,mBAAA;ACJF;;ACNA;EACE,8BAAA;EAAA,sBAAA;ADSF;;ACNA;;;EAGE,2BAAA;EAAA,mBAAA;ADSF;;ACNA;EACE,YAAA;EACA,2CAAA;EACA,iCAAA;EACA,oBAAA;EAAA,oBAAA;EAAA,aAAA;EACA,wBAAA;EAAA,qBAAA;EAAA,uBAAA;ADSF;;AExBA;EACE,iBAAA;EACA,iBAAA;EACA,WAAA;AF2BF;;AExBA;EACE,UAAA;AF2BF;AGdI;EDdJ;IAII,WAAA;EF4BF;AACF","file":"main.css","sourcesContent":["// если вы хотите использовать sass-переменные - удалите root\n// colors\n:root {\n  // base\n  --font-family: \"Open Sans\", sans-serif;\n  --content-width: 1170px;\n  --container-offset: 15px;\n  --container-width: calc(var(--content-width) + (var(--container-offset) * 2));\n\n  // colors\n  --light-color: #fff;\n}\n",":root {\n  --font-family: \"Open Sans\", sans-serif;\n  --content-width: 1170px;\n  --container-offset: 15px;\n  --container-width: calc(var(--content-width) + (var(--container-offset) * 2));\n  --light-color: #fff;\n}\n\nhtml {\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\n.page {\n  height: 100%;\n  font-family: var(--font-family, sans-serif);\n  background-color: rgb(69, 69, 69);\n  display: flex;\n  justify-content: center;\n}\n\n.svg-icon {\n  max-height: 689px;\n  min-height: 337px;\n  width: 100%;\n}\n\n.selector {\n  color: red;\n}\n@media (min-width: 767px) {\n  .selector {\n    color: blue;\n  }\n}","html {\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\n.page {\n  height: 100%;\n  font-family: var(--font-family, sans-serif);\n  background-color: rgb(69, 69, 69);\n  display: flex;\n  justify-content: center;\n}\n",".svg-icon {\n  max-height: 689px;\n  min-height: 337px;\n  width: 100%;\n}\n\n.selector {\n  color: red;\n\n  @include respond-to(\"small\") {\n    color: blue;\n  }\n}\n","$breakpoints: (\n  \"small\": (\n    min-width: 767px,\n  ),\n  \"medium\": (\n    min-width: 992px,\n  ),\n  \"large\": (\n    min-width: 1200px,\n  ),\n) !default;\n\n/// Mixin to manage responsive breakpoints\n/// @author Kitty Giraudel\n/// @param {String} $breakpoint - Breakpoint name\n/// @require $breakpoints\n@mixin respond-to($breakpoint) {\n  // If the key exists in the map\n  @if map-has-key($breakpoints, $breakpoint) {\n    // Prints a media query based on the value\n    @media #{inspect(map-get($breakpoints, $breakpoint))} {\n      @content;\n    }\n  }\n\n  // If the key doesn't exist in the map\n  @else {\n    @warn \"Unfortunately, no value could be retrieved from `#{$breakpoint}`. \"\n        + \"Available breakpoints are: #{map-keys($breakpoints)}.\";\n  }\n}\n"]}